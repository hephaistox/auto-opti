{:deps {io.github.hephaistox/auto-build {:git/sha "e907e29f65049a805c5a33e2f60bbe838c268a1a"}}
 :paths ["src"]
 :tasks
 {:init (do (def ^:dynamic exit System/exit))
  :requires [;;NOTE Should be as small as possible to ensure `lconnect`
             ;;can start whatever the state of the code is.
             [auto-build.os.exit-codes]]
  bp {:doc "Before push"
      :task (binding [exit (fn [exit-code & _] (when-not (zero? exit-code) exit-code))]
              (-> (or (run 'format)
                      (run 'lint)
                      (binding [*command-line-args* (conj *command-line-args* "all")]
                        (run 'clj-test))
                      (binding [*command-line-args* (conj *command-line-args* "all")]
                        (run 'cljs-node-test))
                      auto-build.os.exit-codes/ok)
                  System/exit))}
  clean {:doc "Clean temporary files"
         :requires [[auto-build.tasks.clean :as task-clean]
                    [auto-build.echo :refer [level1-header]]]
         :task (-> (task-clean/clean level1-header "." [".DS_Store"] [".cpcache"] (current-task))
                   exit)}
  clj-test
  {:doc "Test with clj"
   :requires [[auto-build.tasks.clj-test :as build-clj-test]
              [auto-build.echo :refer [level1-header]]]
   :task (->
           (build-clj-test/clj-test level1-header "." "clj-test-runner" (current-task) ["test-clj"])
           exit)}
  cljs-browser-test
  {:doc "Test with cljs in browser"
   :requires [[auto-build.tasks.cljs-browser-test :as build-cljs-browser]
              [auto-build.echo :refer [level1-header]]]
   :task (->
           (build-cljs-browser/cljs-browser-test level1-header "." (current-task) ["browser-test"])
           exit)}
  cljs-node-test
  {:doc "Test with cljs"
   :requires [[auto-build.tasks.cljs-node-test :as build-cljs-node-test]
              [auto-build.echo :refer [level1-header]]]
   :task (-> (build-cljs-node-test/cljs-node-test level1-header "." (current-task) ["ltest"])
             exit)}
  deploy {:doc "Deploy"
          :requires [[auto-build.tasks.deploy :as task-deploy]
                     [auto-build.echo :refer [level1-header]]]
          :task (-> (task-deploy/deploy level1-header "." "main" (current-task))
                    exit)}
  deps {:doc "Update deps"
        :task (do (shell "clj -M:antq") (shell "npm upgrade"))}
  docs {:doc "Docs"
        :requires [[auto-build.tasks.docs :as build-docs] [auto-build.echo :refer [level1-header]]]
        :task (-> (build-docs/docs level1-header "." (current-task) "gh-pages")
                  exit)}
  format {:doc "Format"
          :requires [[auto-build.tasks.formatting :as task-format]
                     [auto-build.echo :refer [level1-header]]]
          :task (-> (task-format/format level1-header "." (current-task))
                    exit)}
  heph-info {:doc "Hephaistox project info"
             :extra-paths ["env/dev/resources"]
             :requires [[auto-build.tasks.heph-info :as heph-info]
                        [auto-build.echo :refer [level1-header]]]
             :task (-> (heph-info/heph-info level1-header (current-task))
                       exit)}
  lint {:doc "Lint"
        :requires [[auto-build.tasks.lint :as task-lint] [auto-build.echo :refer [level1-header]]]
        :task (-> (task-lint/lint level1-header ["src" "test"] "." (current-task))
                  exit)}
  repl {:doc "Clojure repl"
        :override-builtin true
        :requires [[auto-build.tasks.repl :as build-repl] [auto-build.echo :refer [level1-header]]]
        :task (-> (build-repl/repl level1-header "." (current-task))
                  exit)}
  uberjar {:doc "Uberjar"
           :override-builtin true
           :requires [[auto-build.tasks.uberjar :as build-uberjar]
                      [auto-build.echo :refer [level1-header]]]
           :task (-> (build-uberjar/uberjar level1-header "." "target/uberjar" "")
                     exit)}}}
